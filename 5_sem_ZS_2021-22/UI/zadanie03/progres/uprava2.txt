import itertools
import random
from itertools import groupby
from random import randint


class zahrada:
    zaciatky = []       # odkial sa da vstupit do zahradky - poradove cislo podla obvodu
    policka = []        # zahradka
    zahradaX = 0        # rozmer
    zahradaY = 0        # rozmer
    pocetKamenov = 0
    pocetPolicok = 0    # pocet policok zahradky
    obvod = 0           # pocet policok tvoriacich obvod


class pohyb:
    POHYB_X = [1, 0, -1, 0]     # DOLE, DOPRAVA, HORE, DOLAVA
    POHYB_Y = [0, 1, 0, -1]


class glob:
    START = 0       # urcuju kde u mnicha najdeme ktore informacie
    OPER = 1
    POC = 2
    KAMEN = 3

    POCET_MNICHOV = 80     # pre (dalsie generacie) mnichov
    POCET_MAX_MNICHOV = 5
    POCET_MAX_MNICHOV_ZASEK = 5
    TOP_PERCENTO = 5
    POCET_NOVYCH = 15
    ROZSAH_PAROVANIA = 50

    POCET_STARTOV = 20
    POCET_OPERATOROV = 20

    PROB1 = 0.45
    PROB2 = 0.9


class farby:
    SAND = '\u001b[43;1m'
    STONE = '\u001b[30m\u001b[47;1m'

    R = '\u001b[31m'
    G = '\u001b[32m'
    Y = '\u001b[33m'
    B = '\u001b[34m'
    M = '\u001b[35m'
    C = '\u001b[36m'

    ENDC = '\033[0m'


# suradnice okrajov zahrady
def najdiZaciatky(x, y):
    for i in range(0, x):
        for j in range(0, y):

            if (i == 0 or i == x-1):
                zahrada.zaciatky.append([i, j], )
            elif (j == 0 or j == y-1):
                zahrada.zaciatky.append([i, j], )

    return


# done
def vytvorZahradu():
    try:
        subor = open("zahrada1.txt", "r")
    except FileNotFoundError:
        print("Dany subor neexistuje")
        return

    poradie = 0
    kamenX = kamenY = 0
    pocetKamenov = 0

    try:
        for i in subor:
            #print(i[:-1], end = ", ")
            i = i[:-1]          # odstranenie enteru

            if i.isdigit():
                poradie += 1

                if poradie == 1:    # SIRKA
                    zahrada.zahradaX = int(i)
                elif poradie == 2:  # VYSKA
                    zahrada.zahradaY = int(i)
                    # print("sirka x", zahrada.zahradaX, "vyska y", zahrada.zahradaY)
                    zahrada.policka = [[0 for stlpec in range(0, zahrada.zahradaY)] for riadok in range(0, zahrada.zahradaX)]

                elif poradie % 2 == 1:
                    kamenX = int(i)
                else:
                    kamenY = int(i)
                    pocetKamenov += 1
                    # print("kamen:", pocetKamenov, "x:", kamenX, "y:", kamenY)
                    zahrada.policka[kamenX][kamenY] = "K"
    except IndexError:
        print("Zle zadane rozmery v subore")

    zahrada.pocetKamenov = pocetKamenov
    zahrada.pocetPolicok = zahrada.zahradaX * zahrada.zahradaY - pocetKamenov
    najdiZaciatky(zahrada.zahradaX, zahrada.zahradaY)
    zahrada.obvod = len(zahrada.zaciatky)
    print("\nZahrada vytvorena, rozmer", zahrada.zahradaX, "x", zahrada.zahradaY, "\npocet kamenov", pocetKamenov, "pocet policok", zahrada.pocetPolicok, "obvod", zahrada.obvod)
    return


# done
def vypisZahradu(policka):
    for x in range(0, zahrada.zahradaX):
        for y in range(0, zahrada.zahradaY):
            #print(x, y, end=', ')
            policko = policka[x][y]
            if policko == "K":
                print(farby.STONE, "", policko, farby.ENDC, end='')
            else:
                if int(policko) < 10:
                    if int(policko) == 0:
                        print(farby.SAND, "", policko, farby.ENDC, end='')
                    elif int(policko) % 3 == 0:
                        print(farby.SAND + farby.G, "", policko, farby.ENDC, end='')
                    elif int(policko) % 2 == 0:
                        print(farby.SAND + farby.B, "", policko, farby.ENDC, end='')
                    else:
                        print(farby.SAND + farby.R, "", policko, farby.ENDC, end='')
                else:
                    if int(policko) % 3 == 0:
                        print(farby.SAND + farby.C, policko, farby.ENDC, end='')
                    elif int(policko) % 2 == 0:
                        print(farby.SAND + farby.M, policko, farby.ENDC, end='')
                    else:
                        print(farby.SAND + farby.B, policko, farby.ENDC, end='')

        print()


# snad done ?
def pohrab(mnich, flag):

    kopiaZahrady = [[0 for stlpec in range(0, zahrada.zahradaY)] for riadok in range(0, zahrada.zahradaX)]
    mnich[glob.POC] = 0
    mnich[glob.KAMEN] = 0

    # print("starty:", mnich[glob.START])
    # print("pohyby:", mnich[glob.OPER], "\n")

    for i in range(0, zahrada.zahradaX):        # vytvorenie docasnej zahradky
        for j in range(0, zahrada.zahradaY):
            kopiaZahrady[i][j] = zahrada.policka[i][j]

    cisloCesty = 0
    for i in range(0, len(mnich[glob.START])):     # pre vsetky zaciatky

        poz = mnich[glob.START][i]

        startX = aktX = zahrada.zaciatky[poz][0]      # kde mnich zacina
        startY = aktY = zahrada.zaciatky[poz][1]

        # vstup do zahradky
        if kopiaZahrady[startX][startY] == 0:              # ak nebolo pohrabane

            vstup = 1      # strazi ci bol predchadzajuci krok VSTUP do zahradky

            cisloCesty += 1
            # print("ZACINAM na pozicii", poz, "- x", startY, "y", startX, "cislo cesty", cisloCesty)

            for j in range(0, len(mnich[glob.OPER])):      # pre jeho operatory - SMERY

                posunX = pohyb.POHYB_X[mnich[glob.OPER][j]]
                posunY = pohyb.POHYB_Y[mnich[glob.OPER][j]]

                # print("zmena smeru", end=" ")

                # if (mnich[glob.OPER][j] == 0):
                #    print("DOLE")
                # if (mnich[glob.OPER][j] == 1):
                #    print("DOPRAVA")
                # if (mnich[glob.OPER][j] == 2):
                #    print("HORE")
                # if (mnich[glob.OPER][j] == 3):
                #    print("DOLAVA")

                # kym je to v ramci zahradky POKRACUJ ROVNAKYM SMEROM
                while (aktX >= 0 and aktX < zahrada.zahradaX) and (aktY >= 0 and aktY < zahrada.zahradaY):

                    # ak je to VOLNE policko -----------------------------------------------------
                    if kopiaZahrady[aktX][aktY] == 0 :
                        # print(aktX, aktY, "---", vstup)

                        kopiaZahrady[aktX][aktY] = cisloCesty  # pohrabeme
                        mnich[glob.POC] += 1                   # pripocitame

                        aktX += posunX  # POSUNIEME sa
                        aktY += posunY

                        # ak sme v predoslom kroku VSTUPILI do zahradky a chceme hned ODIST (spravit protipohyb -> <-)
                        # (bez toho aby sme narazili na prekazku)
                        if vstup == 1:
                            # ak to nieje rohove policko - vtedy vie prejst dovolenym sposobom
                            if not ((aktX == 0 and aktY == 0) or (aktX == zahrada.zahradaX and aktY == zahrada.zahradaY) or (aktX == zahrada.zahradaX and aktY == 0) or (aktX == 0 and aktY == zahrada.zahradaY)) :
                                # ak ide mimo zahradky
                                if not ((aktX >= 0 and aktX < zahrada.zahradaX) and (aktY >= 0 and aktY < zahrada.zahradaY)):
                                    # print("nedovoleny krok")
                                    aktX -= posunX  # posunie sa naspat do zahradky
                                    aktY -= posunY
                                    kopiaZahrady[aktX][aktY] = 0  # nastavi sa to na nepohrabane
                                    mnich[glob.POC] -= 1  # cize ho ani nepocita
                                    # print("vraciam sa na", aktX, aktY)
                                    vstup = 0  # nastavenie flagu
                                    break      # dalsi cyklus - skusi dalsi smer z toho policka todo mal by ist len kolmo?

                        vstup = 0   # nastavenie flagu

                    # ak to NIE JE volne policko -------------------------------------------------
                    else:
                        # ak je to POSLEDNY mozny POHYB - slepa ulicka - KONIEC
                        if (j == (len(mnich[glob.OPER]) - 1)):
                            # print("ZASEKLI SME SA")
                            if flag == 1:  # ak ma vypisat
                                vypisZahradu(kopiaZahrady)
                            return mnich[glob.POC], 1

                        # ak este VIE ZMENIT SMER
                        else:
                            # ak sme narazili na KAMEN
                            if (kopiaZahrady[aktX][aktY] == "K"):
                                # print("KAMEN        ", aktX, aktY)
                                mnich[glob.KAMEN] += 1        # pocet stretnutych kamenov
                                aktX -= posunX                # posunie sa naspat pred kamen
                                aktY -= posunY
                                kopiaZahrady[aktX][aktY] = 0  # nastavi sa to na nepohrabane
                                mnich[glob.POC] -= 1          # cize ho ani nepocita
                                # print("vraciam sa na", aktX, aktY)
                                break  # dalsi cyklus - skusi dalsi smer z policka pred kamenom

                            # ak sme narazili na POHRABANE
                            elif (kopiaZahrady[aktX][aktY] != 0):
                                # print("pohrabane    ", aktX, aktY, "cesta", kopiaZahrady[aktX][aktY])
                                aktX -= posunX  # posunie sa naspat pred pohrabane
                                aktY -= posunY
                                kopiaZahrady[aktX][aktY] = 0            # nastavi sa to na nepohrabane
                                mnich[glob.POC] -= 1                    # cize ho ani nepocita
                                # print("vraciam sa na", aktX, aktY)
                                break  # dalsi cyklus - skusi dalsi smer z policka pred pohrabanym

    # ked sme sa dostali sem NEZASEKLI sme sa a skusil vsetky pokyny co mal
    if flag == 1:
        vypisZahradu(kopiaZahrady)
    return mnich[glob.POC], 0


def vytvorMnicha():

    operatory = []
    starty = []

    # informacie o STARTOVACICH POLICKACH
    while (len(starty) != glob.POCET_STARTOV - 1):
        start = randint(0, zahrada.obvod - 1)
        starty.append(start)
        starty = [x[0] for x in groupby(starty)]  # odstranenie dupl. startov
        # starty = list(dict.fromkeys(starty))  # odstranenie vsetkych duplikatov

    # informacie o PORADI ZMENY SMERU
    while (len(operatory) != glob.POCET_OPERATOROV - 1):
        operator = randint(0, 3)
        operatory.append(operator)
        operatory = [x[0] for x in groupby(operatory)]  # odstranenie dupl. operatorov (za sebou iducich asi)

    mnich = [starty, operatory, 0, 0]
    return mnich


# todo optimalizuj
def sparuj(rodic1, rodic2):

    chromozom_smery = []
    chromozom_vstupy = []
    limit = 0

    # ------------------------------------------------------- POLE STARTOV

    if len(rodic1[glob.START]) < len(rodic2[glob.START]):
        limit = len(rodic1[glob.START])
    else:
        len(rodic2[glob.START])

    for i in range(0, limit):

        sanca = random.random()

        if sanca < glob.PROB1:
            chromozom_vstupy.append(rodic1[glob.START][i])
        elif sanca < glob.PROB2:
            chromozom_vstupy.append(rodic2[glob.START][i])
        else:                                                   # mutacia
            gen = randint(0, zahrada.obvod - 1)
            chromozom_vstupy.append(gen)

    chromozom_vstupy = list(dict.fromkeys(chromozom_vstupy))  # odstranenie vsetkych duplikatov
    while len(chromozom_vstupy) < glob.POCET_STARTOV:         # mutacia
        gen = randint(0, zahrada.obvod - 1)
        chromozom_vstupy.append(gen)
        chromozom_vstupy = list(dict.fromkeys(chromozom_vstupy))

    # ------------------------------------------------------- POLE OPERATOROV

    if len(rodic1[glob.OPER]) < len(rodic2[glob.OPER]):
        limit = len(rodic1[glob.OPER])
    else:
        len(rodic2[glob.OPER])

    for i in range(0, limit):

        sanca = random.random()

        if sanca < glob.PROB1:
            chromozom_smery.append(rodic1[glob.OPER][i])
        elif sanca < glob.PROB2:
            chromozom_smery.append(rodic2[glob.OPER][i])
        else:                                                   # mutacia
            gen = randint(0, 3)
            chromozom_smery.append(gen)

        mnich[glob.START] = chromozom_vstupy
        mnich[glob.OPER] = chromozom_smery

    return mnich


# todo musi mnich na konci zostat vonku?
# todo rata sa do genomu aj START, POSUN a POCET?
# todo je spravny krok ze vojde a hned vyde?
# todo akym sposobom sa maju krizit
# todo musi to najst riesenie pri oboch sposoboch vyberu mnichov?
# todo mame obmedzenie na pocet mnichov?

if __name__ == "__main__":

    vytvorZahradu()
    vypisZahradu(zahrada.policka)
    print()

    max = 0
    max2 = 0
    maxMnich = []
    maxMnichZaseknuty = []
    populacia = []
    generacia = 1

    # ------------------------------------------------------------- PRVA GENERACIA
    for i in range(0, glob.POCET_MNICHOV):
        mnich = vytvorMnicha()
        pocet, zaseknutie = pohrab(mnich, 0)
        populacia.append(mnich)

        if pocet > max and zaseknutie == 0:     # novi top mnichovia
            max = pocet
            maxMnich = mnich
            print("najviac pohrabanych policok je:", max, "/", zahrada.pocetPolicok, "generacia c.:", generacia)
            #pohrab(maxMnich, 1)  # vypis
        elif pocet > max and pocet > max2 and zaseknutie == 1:
            max2 = pocet
            maxMnichZaseknuty = mnich
            print("najviac pohrabanych policok je:", max2, "/", zahrada.pocetPolicok, "generacia c.:", generacia)
            # pohrab(maxMnichZasek, 1)  # vypis

    if max == zahrada.pocetPolicok or max2 == zahrada.pocetPolicok:
        print("NASLI SME RIESENIE V PRVEJ GENERACII!")
        if max == zahrada.pocetPolicok:
            pohrab(maxMnich, 1)  # vypis
            print("genom", maxMnich)
        else:
            pohrab(maxMnichZaseknuty, 1)  # vypis
            print("genom", maxMnichZaseknuty)

    # ----------------------------------------------------------------- DALSIE GENERACIE
    # nech sa to da lahko v kode vypnut
    elif True:
        while (max != zahrada.pocetPolicok and max2 != zahrada.pocetPolicok):
            zoradovac = lambda x: (x[glob.POC])             # zoradime podla poctu pohrabanych policok
            populacia = sorted(populacia, key=zoradovac)

            generacia += 1
            novaGeneracia = []                                      # najlepsich x % prezije
            pocet = int(glob.TOP_PERCENTO * len(populacia)/100)
            novaGeneracia.extend(populacia[len(populacia)-pocet:len(populacia)+1])

            for i in range(0, glob.POCET_MAX_MNICHOV):      # UZ MAXIMALNI
                novaGeneracia.append(maxMnich)

            for i in range(0, glob.POCET_MAX_MNICHOV_ZASEK):      # UZ MAXIMALNI - ZASEKNUTI
                novaGeneracia.append(maxMnichZaseknuty)

            for i in range(0, glob.POCET_NOVYCH):           # UPLNE NOVI
                mnich = vytvorMnicha()
                novaGeneracia.append(mnich)

            estePotrebujeme = len(populacia) - len(novaGeneracia)

            while (len(novaGeneracia) != glob.POCET_MNICHOV):  # ZVYSOK SA SPARUJE Z EXISTUJUCICH

                rodic1 = random.choice(populacia[glob.ROZSAH_PAROVANIA:])
                rodic2 = random.choice(populacia[glob.ROZSAH_PAROVANIA:])

                dieta = sparuj(rodic1, rodic2)
                novaGeneracia.append(dieta)

            # dalsie skusanie
            for i in range(0, len(novaGeneracia)):
                mnich = novaGeneracia[i]

                pocet, zaseknutie = pohrab(mnich, 0)

                if (pocet > max) and (zaseknutie == 0):  # novi top mnichovia
                    max = pocet
                    maxMnich = mnich
                    print("najviac pohrabanych policok je:", max, "/", zahrada.pocetPolicok, "generacia c.:", generacia)
                    #pohrab(maxMnich, 1)
                elif pocet > max and pocet > max2 and zaseknutie == 1:
                    max2 = pocet
                    maxMnichZaseknuty = mnich
                    print("najviac pohrabanych policok je:", max2, "/", zahrada.pocetPolicok, "generacia c.:", generacia)
                    #pohrab(maxMnichZaseknuty, 1)

            if max == zahrada.pocetPolicok or max2 == zahrada.pocetPolicok:
                if max == zahrada.pocetPolicok:
                    print("\nNASLI SME RIESENIE ! gen.c.", generacia)
                    pohrab(maxMnich, 1)  # vypis
                    print("genom", maxMnich)
                else:
                    print("\nNASLI SME RIESENIE ! - ale mnich sa na konci zasekol :( - gen.c.", generacia)
                    pohrab(maxMnichZaseknuty, 1)  # vypis
                    print("genom", maxMnichZaseknuty)
