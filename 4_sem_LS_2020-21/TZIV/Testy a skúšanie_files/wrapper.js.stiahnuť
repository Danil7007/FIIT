// jQuery Validation Wrapper 0.003

// (c) 2020 by IS4U, s.r.o.
// Maintained by milan.sorm@is4u.cz

const phoneFormats = {
    '1': [ '([0-9]{3}) ([0-9]{4}) ([0-9]{4})', '([0-9]{3}) ([0-9]{4}) ([0-9]{3})', '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '7': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '30': [ '(6[0-9]{2}) ([0-9]{3}) ([0-9]{4})', '(2[345678]1) ([0-9]{3}) ([0-9]{4})', '(2[0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(21) ([0-9]{4}) ([0-9]{4})' ],
    '31': [ '(7[0-9]) ([0-9]{3}) ([0-9]{4})', '([1-68][0-9]{2}) ([0-9]{3}) ([0-9]{3})', '([1-5]0) ([0-9]{3}) ([0-9]{4})' ],
    '33': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '34': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '36': [ '([0-9]{2}) ([0-9]{3}) ([0-9]{3})', '([237]0) ([0-9]{3}) ([0-9]{4})', '(71) ([0-9]{3}) ([0-9]{4})' ],
    '361': [ '([0-9]{3}) ([0-9]{4})' ],
    '39': [ '(0[0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(02) ([0-9]{4}) ([0-9]{4})', '(06) ([0-9]{4}) ([0-9]{4})', '(3[0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '40': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '43': [ '(1) ([0-9]{3}) ([0-9]{3})', '(1) ([0-9]{3}) ([0-9]{4})', '(1) ([0-9]{4}) ([0-9]{4})', '(1) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(1) ([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '(1) ([0-9]{3}) ([0-9]{4}) ([0-9]{4})', '(1) ([0-9]{3}) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(70) ([0-9]{2}) ([0-9]{3})', '(70) ([0-9]{3}) ([0-9]{3})', '(70) ([0-9]{3}) ([0-9]{4})', '(70) ([0-9]{4}) ([0-9]{4})', '(70) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(70) ([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '(70) ([0-9]{3}) ([0-9]{4}) ([0-9]{4})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{2}) ([0-9]{2})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{2}) ([0-9]{3})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{3}) ([0-9]{3})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{3}) ([0-9]{4})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{4}) ([0-9]{4})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '(50[0-9]|6[5-9][0-9]|[89][0-9]{2}|316|463|732|718|710|730|740|711|780) ([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '([0-9]{4}) ([0-9]{3})', '([0-9]{4}) ([0-9]{2}) ([0-9]{2})', '([0-9]{4}) ([0-9]{2}) ([0-9]{3})', '([0-9]{4}) ([0-9]{3}) ([0-9]{3})', '([0-9]{4}) ([0-9]{3}) ([0-9]{4})', '([0-9]{4}) ([0-9]{4}) ([0-9]{4})', '([0-9]{4}) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '([0-9]{7,13})' ],
    '44': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '(1[0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '46': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '([0-9]{3}) ([0-9]{4}) ([0-9]{3})' ],
    '47': [ '([49][0-9][0-9]) ([0-9]{2}) ([0-9]{3})', '([235678][0-9]) ([0-9]{2}) ([0-9]{2}) ([0-9]{2})' ],
    '49': [ '([0-9]+)', '([0-9]{3}) ([0-9]{4}) ([0-9]{3})', '([0-9]{3}) ([0-9]{4}) ([0-9]{4})', '([68]9) ([0-9]{3}) ([0-9]{3})', '([68]9) ([0-9]{4}) ([0-9]{3})',
        '([68]9) ([0-9]{4}) ([0-9]{4})', '([68]9) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '([0-9]{3}) ([0-9]{3}) ([0-9]{2})',
        '([34]0) ([0-9]{3}) ([0-9]{3})', '([34]0) ([0-9]{4}) ([0-9]{3})', '([34]0) ([0-9]{4}) ([0-9]{4})', '([34]0) ([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '52': [ '([0-9]{3}) ([0-9]{7})' ],
    '60': [ '([0-9]{8})', '([0-9]{10})', '([0-9]{9})' ],
    '64': [ '([2][0-9]) ([0-9]{4}) ([0-9]{4})', '([2][0-9]) ([0-9]{3}) ([0-9]{3})', '([34679]) ([0-9]{3}) ([0-9]{4})', '([2][0-9]) ([0-9]{3}) ([0-9]{4})' ],
    '90': [ '([2-5][0-9]{2}) ([0-9]{3}) ([0-9]{4})' ],
    '91': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})', '([0-9]{3}) ([0-9]{3}) ([0-9]{4})', '([0-9]{3}) ([0-9]{4}) ([0-9]{4})' ],
    '94': [ '([0-9]{2}) ([0-9]{7})', '([0-9]) ([0-9]{6})' ],
    '370': [ '([0-9]{2}) ([0-9]{3}) ([0-9]{3})' ],
    '381': [ '([0-9]{2}) ([0-9]{2}) ([0-9]{2}) ([0-9]{3})', '([0-9]{2}) ([0-9]{3}) ([0-9]{3})' ],
    '385': [ '(9[0-9]) ([0-9]{3}) ([0-9]{4})', '([2-5][0-9]) ([0-9]{3}) ([0-9]{4})', '(1) ([0-9]{3}) ([0-9]{4})' ],
    '420': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ],
    '421': [ '([0-9]{3}) ([0-9]{3}) ([0-9]{3})' ]
};

( function ( $ ) {
    function validatorPhoneUis ( phone_number, element ) {
        var number = phone_number.replace( /\(|\)|\s+|-/g, '' );
        number = number.replace( /^00/, '+' );
        if ( ! /^\+/.test( number ) ) number = ( uis.rizeni( 'stat_tel_predvolba' ) || '+420' ) + number;

        if ( ! /^\+[1-9][0-9]+$/.test( number ) ) return false;

        var was_prefix = false;
        for ( const prefix in phoneFormats ) {
            const re = RegExp( '^\\+' + prefix );
            if ( re.test( number ) ) {
                was_prefix = true;
                var hit = false;
                $.each( phoneFormats[ prefix ], function ( index, fmt ) {
                    var format = '+' + prefix + fmt;
                    format = '^\\' + format.replace( /\\(|\\)|\s+/g, '' ) + '$';
                    if ( RegExp( format ).test( number ) ) hit = true;
                } );
                if ( hit ) return true;
            }
        }

        if ( ! was_prefix && RegExp( '^\\+[1-9][0-9]{5,16}$' ).test( number ) ) return true;

        return false;
    }

    $.validator.addMethod( 'phoneUis', function( phone_number, element ) {
        return this.optional( element ) || validatorPhoneUis( phone_number, element );
    }, uis.translate( 'eprihlaska-chyba021' ) );
    
    $.validator.addMethod( 'phoneUisInt', function( phone_number, element ) {
        return this.optional( element ) || ( validatorPhoneUis( phone_number, element ) && /^\s*(\+|00)\s*\d/.test( phone_number ) ); 
    }, uis.translate( 'eprihlaska-chyba021' ) );

    $.validator.addMethod( 'notUc', function ( str, element ) {
        if ( this.optional( element ) ) return true;

        return this.optional( element ) || str !== str.toUpperCase() || /^[^A-Z]$/.test( str ); // !/^[-.'A-Z ]+$/.test( str );

    }, uis.translate( 'common-invalid_notuc_field' ) );
    
    $.validator.addMethod( 'surname', function ( str, element ) {
        if ( this.optional( element ) ) return true;

        return this.optional( element ) || ( ( str !== str.toUpperCase() || /^[^A-Z]$/.test( str ) ) && !/[0-9]/.test( str ) );

    }, uis.translate( 'common-invalid_surname_field' ) );

    $.validator.addMethod( 'time', function ( str, element ) {
        return this.optional( element ) || /^([0-9]|[01][0-9]|2[0-3])\.[0-5][0-9]$/.test( str );
    }, uis.translate( 'common-invalid_time_field' ) );
    
    $.validator.addMethod( 'emailUis', function ( email, element ) {
        return this.optional( element ) || (
               /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( email )    // original jQuery Validator test
            && !/[<>|;&`'\*(){}"\$]/.test( email )      // specific UIS pattern test
            && /^.+@.+\..+$/.test( email )              // Email::Valid FQDN test
            && /^[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*@[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*|(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[^()<>@,;:".\\\[\]\x80-\xff\000-\010\012-\037]*(?:(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[^()<>@,;:".\\\[\]\x80-\xff\000-\010\012-\037]*)*<[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:@[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*(?:,[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*@[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*)*:[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)?(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|"[^\\\x80-\xff\n\015"]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015"]*)*")[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*@[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:\.[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*(?:[^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff]+(?![^(\040)<>@,;:".\\\[\]\000-\037\x80-\xff])|\[(?:[^\\\x80-\xff\n\015\[\]]|\\[^\x80-\xff])*\])[\040\t]*(?:\([^\\\x80-\xff\n\015()]*(?:(?:\\[^\x80-\xff]|\([^\\\x80-\xff\n\015()]*(?:\\[^\x80-\xff][^\\\x80-\xff\n\015()]*)*\))[^\\\x80-\xff\n\015()]*)*\)[\040\t]*)*)*>)$/.test( email )     // Email::Valid RFC822 test
        );
    }, uis.translate( 'karty-popis223' ) );

} )( jQuery );

jQuery( document ).ready( function ( $ ) {
    $( 'form' ).each( function ( index, f ) {
        var methods = [];
        var msgs    = [];

        const basicMsgs = {
            required: uis.translate( 'common-required_field' ),
            minlength: jQuery.validator.format( uis.translate( 'common-minlength_field' ) ),
            maxlength: jQuery.validator.format( uis.translate( 'common-maxlength_field' ) )
        };

        $( 'input[data-field-validate]' ).each( function ( index, el ) {
            const $el = $( el );
            var name = $el.attr( 'name' );
            var maskInfo = $el.data( 'fieldValidate' );
            if ( maskInfo === 'phone' ) {
                methods[ name ] = { 'phoneUis': true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    phoneUis: uis.translate( 'eprihlaska-chyba021' )
                } );
            }

            if ( maskInfo === 'phone:int' ) {
                methods[ name ] = { 'phoneUisInt': true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    phoneUisInt: uis.translate( 'eprihlaska-chyba021' )
                } );
            }

            if ( maskInfo === 'email' ) {
                methods[ name ] = { 'emailUis' : true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    emailUis: uis.translate( 'karty-popis223' )
                } );
            }
            
            if ( maskInfo === 'number' ) {
                methods[ name ] = { 'number' : true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    number: uis.translate( 'common-invalid_number_field' )
                } );
            }

            if ( maskInfo === 'time' ) {
                methods[ name ] = { 'time' : true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    number: uis.translate( 'common-invalid_time_field' )
                } );
            }

            if ( maskInfo === 'not-uc' ) {
                methods[ name ] = { 'notUc': true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    notUc: uis.translate( 'common-invalid_notuc_field' )
                } );
            }
            
            if ( maskInfo === 'surname' ) {
                methods[ name ] = { 'surname': true };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    surname: uis.translate( 'common-invalid_surname_field' )
                } );
            }
            
            if ( /^range:/.test( maskInfo ) ) {
                const rangeArr = maskInfo.split( ':' );
                const limits = rangeArr[ 1 ].split( ',' );
                methods[ name ] = { 'range' : limits };
                msgs[ name ] = jQuery.extend( {}, basicMsgs, {
                    range: jQuery.validator.format( uis.translate( 'common-js_chybny_rozsah' ) )
                } );
            }

            if ( maskInfo === 'generic' ) {
                msgs[ name ] = basicMsgs;
            }
        } );

        $( f ).validate( { rules: methods, messages: msgs, errorPlacement: function ( error, element ) {
            if ( element.next().hasClass( 'ui-datepicker-trigger' ) )
                element.next().after( error );
            else
                element.after( error );
        } } );
    } );
} );
